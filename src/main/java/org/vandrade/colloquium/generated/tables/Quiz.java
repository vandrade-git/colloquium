/*
 * This file is generated by jOOQ.
 */
package org.vandrade.colloquium.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.vandrade.colloquium.generated.DefaultSchema;
import org.vandrade.colloquium.generated.Keys;
import org.vandrade.colloquium.generated.tables.records.QuizRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Quiz extends TableImpl<QuizRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>quiz</code>
     */
    public static final Quiz QUIZ = new Quiz();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizRecord> getRecordType() {
        return QuizRecord.class;
    }

    /**
     * The column <code>quiz.id</code>.
     */
    public final TableField<QuizRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>quiz.created_at</code>.
     */
    public final TableField<QuizRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>quiz.updated_at</code>.
     */
    public final TableField<QuizRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>quiz.owner</code>.
     */
    public final TableField<QuizRecord, String> OWNER = createField(DSL.name("owner"), SQLDataType.CLOB.nullable(false), this, "");

    private Quiz(Name alias, Table<QuizRecord> aliased) {
        this(alias, aliased, null);
    }

    private Quiz(Name alias, Table<QuizRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>quiz</code> table reference
     */
    public Quiz(String alias) {
        this(DSL.name(alias), QUIZ);
    }

    /**
     * Create an aliased <code>quiz</code> table reference
     */
    public Quiz(Name alias) {
        this(alias, QUIZ);
    }

    /**
     * Create a <code>quiz</code> table reference
     */
    public Quiz() {
        this(DSL.name("quiz"), null);
    }

    public <O extends Record> Quiz(Table<O> child, ForeignKey<O, QuizRecord> key) {
        super(child, key, QUIZ);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<QuizRecord, Integer> getIdentity() {
        return (Identity<QuizRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<QuizRecord> getPrimaryKey() {
        return Keys.PK_QUIZ;
    }

    @Override
    public List<UniqueKey<QuizRecord>> getKeys() {
        return Arrays.<UniqueKey<QuizRecord>>asList(Keys.PK_QUIZ);
    }

    @Override
    public Quiz as(String alias) {
        return new Quiz(DSL.name(alias), this);
    }

    @Override
    public Quiz as(Name alias) {
        return new Quiz(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Quiz rename(String name) {
        return new Quiz(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quiz rename(Name name) {
        return new Quiz(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
